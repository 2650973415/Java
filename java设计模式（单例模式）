单例模式：
23中设计模式中最简单的一种设计模式

	1. 要保证对象不能在类的外部被随意实例化
	New
	解决方案：构造方法私有化
	2. 保证类创建的过程发生在类的内部
	还要保证在类的外部能拿到类内部初始化的对象

作用：
  为了保证JVM中某一个类型的java对象永远只有一个
  为了节省内存的开销

单例模式要领：
	1. 构造方法私有化
	2. 对外提供一个公开的静态的获取当前类型的方法
	3. 提供一个当前类型的静态变量
	
单例模式分为两种：
	饿汉式单例：在类加载阶段就创建了对象
	懒汉式单例：用到对象的时候才会创建对象
	
代码：
//懒汉式单例模式
public class Singleton｛
	//静态变量
	private static Singleton s；
	//将构造方法私有化
	private Singleton()｛｝
	//对外提供一个公开获取Singleton对象的方法
	public static Singleton getInstance()｛
		If(s==null){
			s = new Singleton();
		}
		return s;
	｝
｝

//饿汉式单例模式
public class Customer{
	//类加载时只执行一次，所以先new 一个对象
	Private static Customer c = new Customer();
	//构造方法私有化
	Private Customer(){}
	//提供公开的方法
	Public static Customer getInstance(){
		Return c;
	}
}
工厂模式：
• 屏蔽不同子类实现的差异，提高代码的可拓展性和可维护性;

import java.util.Scanner;
//测试
public class Test{
	public static Scanner sc = new Scanner(System.in);
	public static void main(String[] args){
		System.out.print("请输入手机品牌：");
		String str = sc.next();
		//将手机品牌传入工厂模式Factory.factory(str)中，
		//让工厂模式选择需要的对象
		Phone phone = Factory.factory(str);
		//验证
		phone.cellPhone();
	}
}

//工厂模式
public class Factory{
	public static Phone factory(String str){
		Phone phone = null;
		if("xiaomi".equals(str)||"小米".equals(str)){
			phone = new XiaoMi();
		}else if("meizu".equals(str)||"魅族".equals(str)){
			phone = new MeiZu();
		}else{
			System.out.println("杂牌机！");
		}
		return phone;
	}
}
//接口
interface Phone{
	void cellPhone();
}
//魅族类
public class MeiZu implements Phone{
	public void cellPhone(){
		System.out.println("魅族手机！");
	}
}
//小米类
public class XiaoMi implements Phone{
	public void cellPhone(){
		System.out.println("小米手机！");
	}
}


适配器模式：
//测试
public class Test{
	public static void main(String[] args){
		IWindow iWin = new MyIWindow();
		iWin.Close();
	}
}
//接口
interface IWindow{
	void Max();
	void Min();
	void Close();
}
//window类
public class IWindowImpl implements IWindow{
	public void Max(){}
	public void Min(){}
	public void Close(){}
}
//利用继承选择我们需要的方法
public class MyIWindow extends IWindowImpl{
	public void Close(){
		System.out.println("关闭窗口！");
	}
}
